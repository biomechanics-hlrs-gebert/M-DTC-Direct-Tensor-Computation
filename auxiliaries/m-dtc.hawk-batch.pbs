#!/bin/bash
# ------------------------------------------------------------------------------
# Batch scipt for HLRS Hawk
#
# Author:    Johannes Gebert - HLRS - NUM - gebert@hlrs.de
# Date:      09.01.2022
# Last edit: 14.11.2022
#
# For use of PBSPro visit:
# https://kb.hlrs.de/platforms/index.php/Batch_System_PBSPro_(Hawk)
# ------------------------------------------------------------------------------
#PBS -N fh02-provenance
#PBS -l select=64:node_type=rome:mpiprocs=128:node_type_mem=256gb
#PBS -l walltime=00:25:00
### #PBS -l walltime=24:00:00
#PBS -q test
#PBS -M gebert@hlrs.de
# ------------------------------------------------------------------------------
date
echo "############################################################"
echo -e "Job identifier:\t${PBS_JOBID}"
echo -e "Job name:\t${PBS_JOBNAME}"
echo "running on ${HOST}"
#
# ------------------------------------------------------------------------------
# Change to the directory that the job was submitted from and 
# Source the environment. »shellcheck« is some sort of a pragma for shellcheck (!)
# ------------------------------------------------------------------------------
cd "$PBS_O_WORKDIR" || exit
#
# shellcheck source=/dev/null
# source "./environment.source" hawk-exp --no-output
#
# ------------------------------------------------------------------------------
# Set the binary and the dataset directory.
# ------------------------------------------------------------------------------
BINARY="./bin/dtc_V1.1.0_x86_64"
DATASET_DIR="datasets/"
#
# ------------------------------------------------------------------------------
# Set the basename of the datasets, according to the MeRaDat format.
# In the second array, declare the number of processors used.
# ------------------------------------------------------------------------------
declare -a basenames=(\
    "FH01-2_mu_dHev_dtc_processors186" \
    "FH01-2_mu_dev_dtc_processors93" \
    "FH01-2_mu_dev_dtc_processors46" \
    )
#
declare -a processors=(\
    "8185" \
    "8185" \
    "8097" \
    )
#
for ((ii=0; ii<${#basenames[@]}; ii++));
do
    "$DATASET_DIR"/memlog.sh "$DATASET_DIR"/"${basenames[ii]}".memlog > /dev/null 2> /dev/null &
    #
    mpirun -np "${processors[ii]}" "$BINARY" "$PBS_O_WORKDIR" "$DATASET_DIR"/"${basenames[ii]}".meta \
            >"$DATASET_DIR"/"${basenames[ii]}".std_out 2>"$DATASET_DIR"/"${basenames[ii]}".std_err
done